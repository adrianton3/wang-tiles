// Generated by CoffeeScript 1.12.3
(function() {
  'use strict';
  var bytesPerPixel, equals, flipHorizontal, flipVertical, get, getStripe, make, proto, rotate180, rotate270, rotate90;

  bytesPerPixel = 4;

  get = function(arg) {
    var start, x, y;
    x = arg.x, y = arg.y;
    if (!((0 <= x && x < this.size.x) && (0 <= y && y < this.size.y))) {
      throw new Error("out of bounds");
    }
    start = (y * this.size.x + x) * bytesPerPixel;
    return [this.data[start + 0], this.data[start + 1], this.data[start + 2], this.data[start + 3]];
  };

  getStripe = function(start, increment, length) {
    var i, j, position, ref, results, values;
    position = start;
    results = [];
    for (i = j = 0, ref = length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
      values = this.get(position);
      position = position.add(increment);
      results.push(values);
    }
    return results;
  };

  rotate90 = function() {
    var data, j, k, ref, ref1, x, y;
    data = [];
    for (x = j = 0, ref = this.size.x; 0 <= ref ? j < ref : j > ref; x = 0 <= ref ? ++j : --j) {
      for (y = k = ref1 = this.size.y - 1; ref1 <= 0 ? k <= 0 : k >= 0; y = ref1 <= 0 ? ++k : --k) {
        data.push.apply(data, this.get(Vec2.make(x, y)));
      }
    }
    return make(data, Vec2.make(this.size.y, this.size.x));
  };

  rotate180 = function() {
    var data, j, k, ref, ref1, x, y;
    data = [];
    for (y = j = ref = this.size.y - 1; ref <= 0 ? j <= 0 : j >= 0; y = ref <= 0 ? ++j : --j) {
      for (x = k = ref1 = this.size.x - 1; ref1 <= 0 ? k <= 0 : k >= 0; x = ref1 <= 0 ? ++k : --k) {
        data.push.apply(data, this.get(Vec2.make(x, y)));
      }
    }
    return make(data, this.size);
  };

  rotate270 = function() {
    var data, j, k, ref, ref1, x, y;
    data = [];
    for (x = j = ref = this.size.x - 1; ref <= 0 ? j <= 0 : j >= 0; x = ref <= 0 ? ++j : --j) {
      for (y = k = 0, ref1 = this.size.y; 0 <= ref1 ? k < ref1 : k > ref1; y = 0 <= ref1 ? ++k : --k) {
        data.push.apply(data, this.get(Vec2.make(x, y)));
      }
    }
    return make(data, Vec2.make(this.size.y, this.size.x));
  };

  flipVertical = function() {
    var data, j, k, ref, ref1, x, y;
    data = [];
    for (y = j = 0, ref = this.size.y; 0 <= ref ? j < ref : j > ref; y = 0 <= ref ? ++j : --j) {
      for (x = k = ref1 = this.size.x - 1; ref1 <= 0 ? k <= 0 : k >= 0; x = ref1 <= 0 ? ++k : --k) {
        data.push.apply(data, this.get(Vec2.make(x, y)));
      }
    }
    return make(data, this.size);
  };

  flipHorizontal = function() {
    var data, j, k, ref, ref1, x, y;
    data = [];
    for (y = j = ref = this.size.y - 1; ref <= 0 ? j <= 0 : j >= 0; y = ref <= 0 ? ++j : --j) {
      for (x = k = 0, ref1 = this.size.x; 0 <= ref1 ? k < ref1 : k > ref1; x = 0 <= ref1 ? ++k : --k) {
        data.push.apply(data, this.get(Vec2.make(x, y)));
      }
    }
    return make(data, this.size);
  };

  equals = function(arg) {
    var data, size;
    data = arg.data, size = arg.size;
    return this.size.equals(size && this.data.every(function(value, index) {
      return data[index] === value;
    }));
  };

  proto = {
    get: get,
    getStripe: getStripe,
    rotate90: rotate90,
    rotate180: rotate180,
    rotate270: rotate270,
    flipHorizontal: flipHorizontal,
    flipVertical: flipVertical,
    equals: equals
  };

  make = function(data, size) {
    var instance;
    instance = Object.create(proto);
    Object.assign(instance, {
      data: data,
      size: size
    });
    return instance;
  };

  if (window.TileData == null) {
    window.TileData = {};
  }

  Object.assign(window.TileData, {
    make: make
  });

}).call(this);
