// Generated by CoffeeScript 1.12.3
(function() {
  'use strict';
  var getFlipHorizontal, getFlipVertical, getFlips, getNeighbors, getOptions, getRotations, getSignature, getTiles, getTileset, getVariants, groupBy, indexBy, tileDataToImage,
    slice = [].slice;

  indexBy = Util.indexBy, groupBy = Util.groupBy;

  getSignature = function(tileData) {
    var down, left, right, up, zero;
    zero = Vec2.make(0, 0);
    up = tileData.getStripe(zero, Vec2.make(1, 0), tileData.size.x);
    down = tileData.getStripe(zero.down(tileData.size.y - 1), Vec2.make(1, 0), tileData.size.x);
    left = tileData.getStripe(zero, Vec2.make(0, 1), tileData.size.y);
    right = tileData.getStripe(zero.right(tileData.size.x - 1), Vec2.make(0, 1), tileData.size.y);
    return {
      up: up.toString(),
      down: down.toString(),
      left: left.toString(),
      right: right.toString()
    };
  };

  getOptions = function(tile) {
    var get, zero;
    get = tile.get.bind(tile);
    zero = Vec2.make(0, 0);
    return {
      weight: (get(zero))[0] / 255,
      rotations: (get(zero.right(1)))[0] > 127,
      flip: {
        vertical: (get(zero.right(2)))[0] > 127,
        horizontal: (get(zero.right(3)))[0] > 127
      }
    };
  };

  getNeighbors = function(tilesBySignature, tile) {
    var down, left, right, up;
    up = tilesBySignature.down.has(tile.signature.up) ? tilesBySignature.down.get(tile.signature.up) : [];
    down = tilesBySignature.up.has(tile.signature.down) ? tilesBySignature.up.get(tile.signature.down) : [];
    left = tilesBySignature.right.has(tile.signature.left) ? tilesBySignature.right.get(tile.signature.left) : [];
    right = tilesBySignature.left.has(tile.signature.right) ? tilesBySignature.left.get(tile.signature.right) : [];
    return {
      up: up,
      down: down,
      left: left,
      right: right
    };
  };

  getRotations = function(tileData, arg) {
    var rotated180, rotated90, rotations;
    rotations = arg.rotations;
    if (!rotations) {
      return {};
    }
    rotated90 = tileData.rotate90();
    if (rotated90.equals(tileData)) {
      return {};
    }
    rotated180 = tileData.rotate180();
    if (rotated180.equals(tileData)) {
      return {
        'r90': rotated90
      };
    }
    return {
      'r90': rotated90,
      'r180': rotated180,
      'r270': tileData.rotate270()
    };
  };

  getFlipHorizontal = function(tileData, arg) {
    var flippedHorizontal, horizontal;
    horizontal = arg.horizontal;
    if (!horizontal) {
      return {};
    }
    flippedHorizontal = tileData.flipHorizontal();
    if (flippedHorizontal.equals(tileData)) {
      return {};
    } else {
      return {
        'h': flippedHorizontal
      };
    }
  };

  getFlipVertical = function(tileData, arg) {
    var flippedVertical, vertical;
    vertical = arg.vertical;
    if (!vertical) {
      return {};
    }
    flippedVertical = tileData.flipVertical();
    if (flippedVertical.equals(tileData)) {
      return {};
    } else {
      return {
        'v': flippedVertical
      };
    }
  };

  getFlips = function(tileData, arg) {
    var flip, flips;
    flip = arg.flip;
    flips = Object.assign({}, getFlipHorizontal(tileData, flip), getFlipVertical(tileData, flip));
    if ((flips['h'] != null) && (flips['v'] != null) && flips['h'].equals(flips['v'])) {
      return {
        'h': flips['h']
      };
    } else {
      return flips;
    }
  };

  getVariants = function(tileData, options) {
    var flips, rotations;
    rotations = getRotations(tileData, options);
    flips = getFlips(tileData, options);
    if (options.rotations && options.flip.vertical && options.flip.horizontal) {
      if ((rotations['r180'] != null) && (flips['h'] != null) && (flips['v'] != null)) {
        return Object.assign({}, rotations, flips, {
          'r90-h': rotations['r90'].flipHorizontal(),
          'r270-h': rotations['r270'].flipHorizontal()
        });
      } else if ((rotations['r90'] != null) && (rotations['r180'] == null) && (flips['h'] != null) && (flips['v'] != null)) {
        return Object.assign({}, rotations, flips, {
          'r90-h': rotations['r90'].flipHorizontal()
        });
      } else {
        return rotations;
      }
    } else {
      return Object.assign({}, rotations, flips);
    }
  };

  getTiles = (function() {
    var offset, padding;
    padding = {
      x: 2,
      y: 4
    };
    offset = {
      x: 1,
      y: 1
    };
    return function(canvas, size) {
      var cellSize, context, i, id, j, k, l, options, optionsData, original, ref, ref1, tileData, tiles, variants;
      context = canvas.getContext('2d');
      cellSize = Vec2.make(Math.floor(canvas.width / size.x) - padding.x, Math.floor(canvas.height / size.y) - padding.y);
      tiles = [];
      for (i = k = 0, ref = size.x; 0 <= ref ? k < ref : k > ref; i = 0 <= ref ? ++k : --k) {
        for (j = l = 0, ref1 = size.y; 0 <= ref1 ? l < ref1 : l > ref1; j = 0 <= ref1 ? ++l : --l) {
          tileData = context.getImageData(i * (cellSize.x + padding.x) + offset.x, j * (cellSize.y + padding.y) + offset.y, cellSize.x, cellSize.y).data;
          original = TileData.make(tileData, cellSize);
          optionsData = context.getImageData(i * (cellSize.x + padding.x) + offset.x, j * (cellSize.y + padding.y) + cellSize.y + offset.y * 2, cellSize.x, 1).data;
          id = "t-" + i + "-" + j;
          options = getOptions(TileData.make(optionsData, {
            x: cellSize.x,
            y: 1
          }));
          variants = getVariants(original, options);
          [['id', original]].concat(slice.call((Object.entries(variants)))).forEach(function(arg) {
            var key, signature, tileData;
            key = arg[0], tileData = arg[1];
            signature = getSignature(tileData);
            tiles.push(Object.assign({
              id: id + "-" + key,
              tileData: tileData,
              signature: signature
            }, options));
          });
        }
      }
      return tiles;
    };
  })();

  tileDataToImage = function(arg) {
    var canvas, context, data, imageData, size;
    data = arg.data, size = arg.size;
    canvas = document.createElement('canvas');
    canvas.width = size.x;
    canvas.height = size.y;
    context = canvas.getContext('2d');
    imageData = new ImageData(new Uint8ClampedArray(data), size.x, size.y);
    context.putImageData(imageData, 0, 0);
    return new Promise(function(resolve, reject) {
      var image;
      image = new Image;
      image.src = canvas.toDataURL();
      return image.addEventListener('load', function() {
        resolve(image);
      });
    });
  };

  getTileset = function(canvas, size) {
    var tiles, tilesBySignature;
    tiles = getTiles(canvas, size);
    tilesBySignature = {
      up: groupBy(tiles, function(tile) {
        return tile.signature.up;
      }),
      down: groupBy(tiles, function(tile) {
        return tile.signature.down;
      }),
      left: groupBy(tiles, function(tile) {
        return tile.signature.left;
      }),
      right: groupBy(tiles, function(tile) {
        return tile.signature.right;
      })
    };
    tiles.forEach(function(tile) {
      tile.neighbors = getNeighbors(tilesBySignature, tile);
    });
    return Promise.all(tiles.map(function(tile) {
      return (tileDataToImage(tile.tileData)).then(function(image) {
        return tile.image = image;
      });
    })).then(function() {
      return indexBy(tiles, function(arg) {
        var id;
        id = arg.id;
        return id;
      });
    });
  };

  if (window.Tileset == null) {
    window.Tileset = {};
  }

  Object.assign(window.Tileset, {
    getTileset: getTileset
  });

}).call(this);
