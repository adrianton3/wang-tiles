// Generated by CoffeeScript 1.12.3
(function() {
  'use strict';
  var groupBy, indexBy, intersect, randInt, select,
    slice = [].slice;

  indexBy = function(items, getKey) {
    var map;
    map = new Map;
    items.forEach(function(item) {
      var key;
      key = getKey(item);
      map.set(key, item);
    });
    return map;
  };

  groupBy = function(items, getKey) {
    var map;
    map = new Map;
    items.forEach(function(item) {
      var key;
      key = getKey(item);
      if (map.has(key)) {
        (map.get(key)).push(item);
      } else {
        map.set(key, [item]);
      }
    });
    return map;
  };

  randInt = function(max) {
    return Math.floor(Math.random() * max);
  };

  select = function(items) {
    var i, item, j, len, len1, partial, rand, sum;
    sum = 0;
    for (i = 0, len = items.length; i < len; i++) {
      item = items[i];
      sum += item.weight;
    }
    rand = Math.random() * sum;
    partial = 0;
    for (j = 0, len1 = items.length; j < len1; j++) {
      item = items[j];
      partial += item.weight;
      if (partial > rand) {
        return item;
      }
    }
  };

  intersect = function() {
    var first, rest;
    first = arguments[0], rest = 2 <= arguments.length ? slice.call(arguments, 1) : [];
    if (first == null) {
      return [];
    } else if (rest.length === 0) {
      return first;
    } else {
      return first.filter(function(candidate) {
        return rest.every(function(subset) {
          return subset.includes(candidate);
        });
      });
    }
  };

  if (window.Util == null) {
    window.Util = {};
  }

  Object.assign(window.Util, {
    indexBy: indexBy,
    groupBy: groupBy,
    randInt: randInt,
    select: select,
    intersect: intersect
  });

}).call(this);
